{
	"info": {
		"_postman_id": "985f286b-ede0-4929-abd3-7d61ccabb605",
		"name": "users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "list of user profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an array\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an(\"array\");\r",
							"\r",
							"});\r",
							"\r",
							"//Checking the schema\r",
							"//forma 1 de verificar el esquema, tipo de elementos y su contenido\r",
							"pm.test(\"Esquema de post correcto\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    let schema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": \"object\"\r",
							"    };\r",
							"\r",
							"   /* let postSchema = {\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\":\"number\"\r",
							"            },\r",
							"            \"username\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"email\": { \r",
							"                \"type\": \"string\" \r",
							"            },\r",
							"            \"password\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"create_at\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"updated_at\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"\r",
							"    tv4.addSchema('postSchema', postSchema);*/\r",
							"    \r",
							"    let valid = tv4.validate(jsonData, schema, false, true);\r",
							"    \r",
							"    if (valid) {\r",
							"        console.log(tv4.error);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid).to.be.true;\r",
							"});\r",
							"\r",
							"/*function checkPost(post) {\r",
							"    pm.expect(post).to.be.an(\"object\");\r",
							"    pm.expect(post).to.have.keys('userId','id','title','body');\r",
							"    pm.expect(post.userId).to.be.a(\"number\");\r",
							"    pm.expect(post.id).to.be.a(\"number\");\r",
							"    pm.expect(post.title).to.be.a(\"string\");\r",
							"    pm.expect(post.body).to.be.a(\"string\");\r",
							"}\r",
							"\r",
							"//forma 2 de evalar los elementos y su contenido\r",
							"pm.test(\"Objetos en el array\", () => responseJson.forEach(checkPost));\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"var lambda = () => console.log('lambda');\r",
							"var lambda2 = () => { console.log('lambda {}') };\r",
							"\r",
							"var fun = function() {\r",
							"    console.log('function {}');\r",
							"}\r",
							"\r",
							"function checktype(value) {\r",
							"    if (typeof value == 'string') {\r",
							"        return \"me has dado una cadena\";\r",
							"    }\r",
							"    if (typeof value == 'number') {\r",
							"        return 0;\r",
							"    }\r",
							"\r",
							"    return \"No se que me mandaste\";\r",
							"}\r",
							"\r",
							"console.log(checktype());\r",
							"console.log(checktype(\"00000\"));\r",
							"console.log(checktype(15));\r",
							"console.log(checktype([]));*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/user/get",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"user",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "new user profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = +new Date();\r",
							"\r",
							"pm.globals.set(\"username\", `${random}-user`);\r",
							"pm.globals.set(\"email\", `${random}-user@test.com`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User creation was successful\", function () {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.message).to.eql(\"User Successfully created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{api_url}}/user/create",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		}
	]
}